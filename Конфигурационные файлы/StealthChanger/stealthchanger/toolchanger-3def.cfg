########################################################################
# Макрос демонстрации работы Toolchanger. Случайным образом переключает 
# головы заданное количество раз.
########################################################################


[gcode_macro TOOLCHANGE_DEMO]
description: [SAMPLES=<int>]
  Run random tool changes.
  SAMPLES= Number of changes to run, default is 20.
gcode:
    {% set t = params.SAMPLES|default(20)|int %}
    {% for n in range(t) %}
      T{ printer.toolchanger.tool_numbers | random }
    {% endfor %}

########################################################################
# Макрос очистки сопла
########################################################################


[gcode_macro TOOLCHANGER_CLEAN_NOZZLE]
variable_start_x: 195
variable_start_y: 549
# variable_start_z: 2
variable_wipe_dist: 20
variable_wipe_times: 10 
variable_wipe_speed: 400
variable_raise_distance: 10
variable_min_temp: 150
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

  {% if printer["gcode_macro STATUS_CLEANING"] is defined %}
    STATUS_CLEANING
  {% endif %}
  RESPOND TYPE=echo MSG="Cleaning nozzle"
  {% set heater =  printer.toolhead.extruder %}
  {% set target_temp = printer[heater].target %}
  {% if target_temp < min_temp %}
    M104 S{min_temp}
  {% endif %}

  G90
  
  ## Move nozzle to start position
  G1 X{start_x} Y{start_y} F12000
  TEMPERATURE_WAIT SENSOR={heater} MINIMUM={min_temp}

  ## Wipe nozzle
  G1 X{start_x} F{wipe_speed * 60}
  {% for wipes in range(1, (wipe_times + 1)) %}
    G1 X{start_x + wipe_dist} F{wipe_speed * 60}
    G1 X{start_x} F{wipe_speed * 60}
  {% endfor %}

  ## Raise nozzle
  # G1 Z{raise_distance}
  M104 S{target_temp}

  {% if printer["gcode_macro STATUS_READY"] is defined %}
    STATUS_READY
  {% endif %}

########################################################################
# Переопределённый макрос калибровки смещений сопел по X, Y и Z
########################################################################

[gcode_macro CALIBRATE_ALL_OFFSETS]
gcode:
    {% set tools = printer.toolchanger.tool_numbers %}
    {% set names = printer.toolchanger.tool_names %}
    # Tool 0
    SELECT_TOOL T={tools[0]}  RESTORE_AXIS=XYZ
    STOP_TOOL_PROBE_CRASH_DETECTION

    # Проверяем, есть ли макрос очистки сопла и включен ли он, если есть - чистим сопло.
    {% if printer["gcode_macro TOOLCHANGER_CLEAN_NOZZLE"] is defined %}
        TOOLCHANGER_CLEAN_NOZZLE
    {% endif %}

    CALIBRATE_MOVE_OVER_PROBE    
    M104 S150
    TEMPERATURE_WAIT SENSOR='{printer.toolhead.extruder}' MINIMUM=150
    TOOL_LOCATE_SENSOR
    M104 S0
    {% for tool in tools[1:] %}
        SELECT_TOOL T={tool}  RESTORE_AXIS=Z
        STOP_TOOL_PROBE_CRASH_DETECTION

        # Проверяем, есть ли макрос очистки сопла и включен ли он, если есть - чистим сопло.
        {% if printer["gcode_macro TOOLCHANGER_CLEAN_NOZZLE"] is defined %}
            TOOLCHANGER_CLEAN_NOZZLE
        {% endif %}

        M104 S150 T{tool}
        CALIBRATE_MOVE_OVER_PROBE
        TEMPERATURE_WAIT SENSOR='{printer[names[loop.index]].extruder}' MINIMUM=150
        TOOL_CALIBRATE_TOOL_OFFSET
        TOOL_CALIBRATE_SAVE_TOOL_OFFSET SECTION="{names[loop.index]}" ATTRIBUTE=gcode_x_offset VALUE="{% raw %}{x:0.6f}{% endraw %}"
        TOOL_CALIBRATE_SAVE_TOOL_OFFSET SECTION="{names[loop.index]}" ATTRIBUTE=gcode_y_offset VALUE="{% raw %}{y:0.6f}{% endraw %}"
        TOOL_CALIBRATE_SAVE_TOOL_OFFSET SECTION="{names[loop.index]}" ATTRIBUTE=gcode_z_offset VALUE="{% raw %}{z:0.6f}{% endraw %}"
        M104 S0
    {% endfor %}
    
    # Finish up
    SELECT_TOOL T={tools[0]} RESTORE_AXIS=XYZ

########################################################################
# Макрос измерения резонансов для всех голов
########################################################################

[gcode_macro AXES_SHAPER_TEST_ALL]
gcode:
    {% set tools = printer.toolchanger.tool_numbers %}
    {% set names = printer.toolchanger.tool_names %}
    # Tool 0
    SELECT_TOOL T={tools[0]}  RESTORE_AXIS=XYZ
    RESPOND TYPE=echo MSG="Измеряем шейперы для T{tools[0]}"
    AXES_SHAPER_CALIBRATION
    {% for tool in tools[1:] %}
        M107 
        SELECT_TOOL T={tool}  RESTORE_AXIS=Z
        G4 P5000
        RESPOND TYPE=echo MSG="Измеряем шейперы для T{tool}"
        AXES_SHAPER_CALIBRATION
    {% endfor %}
    SELECT_TOOL T=0  RESTORE_AXIS=XYZ

########################################################################
# Макрос выключения всех вентиляторов обдува детали
########################################################################
[gcode_macro _TOOLCHANGER_TURN_OFF_FANS]
description: Disable all extruder steppers
gcode:
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    M107 T{tool_nr}
  {% endfor %}

########################################################################
# Переопределяем Toolcahnger для добавления STOP_TOOL_PROBE_CRASH_DETECTION
########################################################################

[toolchanger]
  t_command_restore_axis: Z
  params_safe_y: 120
  params_close_y: 15
  params_fast_speed: 10000 # Go as fast as we can
  params_path_speed: 900 # 20mm/s for the actual change
  # Path positions relative to the park position
  # use x,y,z; f= multiplier to path speed; verify= Verify tool detected at end of the move.
  params_dropoff_path: [{'y':9.5 ,'z':4}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]
  params_pickup_path: [{'z':-10, 'y':16}, {'z':-10, 'y':0}, {'z':0, 'y':0, 'f':0.5, 'verify':1}, {'y':5.5, 'z':0}, {'y':9.5, 'z':2}, {'y':9.5 ,'z':4}]

  # Parking position - per tool
  #params_park_x: 142.2
  #params_park_y: -6.0
  #params_park_z: 308.2
  # Default shaper params
  params_input_shaper_freq_x: 62.4
  params_input_shaper_freq_y: 88.6
  initialize_on: home
  require_tool_present: True

  error_gcode:
    PAUSE

  before_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="''"
    {% endif %}

  after_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="'c44'"
    {% endif %}
    {% if tool.params_input_shaper_freq_x %}
      SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y}
    {% endif %}

  dropoff_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool.params_dropoff_path %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    RESPOND TYPE=echo MSG='Dropping off {tool.name}'
    G90
    STOP_TOOL_PROBE_CRASH_DETECTION
    ; Move 1 mm up to avoid crashing into things
    G0 Z{ [cur_z+1.0, max_z]|min } F{fast}
    #   ##############  Move up to the dock  ##############
    ROUNDED_G0 Y={tool.params_safe_y} D=20 F={fast}
    ROUNDED_G0 X={x} D=150 F={fast}
    ROUNDED_G0 Z={z + path[0]['z']|float} D=20 F={fast}
    ROUNDED_G0 Y={y + path[0]['y']|float} D=0 F={fast}
    #  ############## Run the path ##############
    {% for pos in path %}
      {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
    {% endfor %}

  pickup_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool.params_pickup_path %}
    RESPOND TYPE=echo MSG='Picking up {tool.name}'
    G90
    #   ##############  Fast to the last point  ##############
    ROUNDED_G0 Y={tool.params_close_y} F={fast} D=5
    ROUNDED_G0 X={x} Z={z + path[0]['z']|float} F={fast} D=5
    ROUNDED_G0 Y={y + path[0]['y']|float} F={fast} D=0
    # Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.

    {% if tool.extruder %}
      M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
    {% endif %}
    # Run the path
    {% for pos in path %}
      {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
      {% if 'verify' in pos %}
        VERIFY_TOOL_DETECTED T={tool.tool_number}
      {% endif %}
    {% endfor %}
    # Restore the position with smooth rounded move.
    ROUNDED_G0 Y={tool.params_safe_y} F={fast} D=20
    {% if 'Z' in restore_position %}
      ROUNDED_G0 Z={restore_position.Z} F={fast} D=150
    {% endif %}
    {% if 'X' in restore_position %}
      ROUNDED_G0 X={restore_position.X} F={fast} D=1000
    {% endif %}
    {% if 'Y' in restore_position %}
      ROUNDED_G0 Y={restore_position.Y} F={fast} D=0
    {% endif %}
    ROUNDED_G0 D=0
    START_TOOL_PROBE_CRASH_DETECTION